<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EcoLearn - Environmental Science Games</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        :root {
            --color-white: rgba(255, 255, 255, 1);
            --color-black: rgba(0, 0, 0, 1);
            --color-cream-50: rgba(252, 252, 249, 1);
            --color-cream-100: rgba(255, 255, 253, 1);
            --color-gray-200: rgba(245, 245, 245, 1);
            --color-gray-300: rgba(167, 169, 169, 1);
            --color-gray-400: rgba(119, 124, 124, 1);
            --color-slate-500: rgba(98, 108, 113, 1);
            --color-brown-600: rgba(94, 82, 64, 1);
            --color-charcoal-700: rgba(31, 33, 33, 1);
            --color-charcoal-800: rgba(38, 40, 40, 1);
            --color-slate-900: rgba(19, 52, 59, 1);
            --color-teal-300: rgba(50, 184, 198, 1);
            --color-teal-400: rgba(45, 166, 178, 1);
            --color-teal-500: rgba(33, 128, 141, 1);
            --color-teal-600: rgba(29, 116, 128, 1);
            --color-teal-700: rgba(26, 104, 115, 1);
            --color-teal-800: rgba(41, 150, 161, 1);
            --color-red-400: rgba(255, 84, 89, 1);
            --color-red-500: rgba(192, 21, 47, 1);
            --color-orange-400: rgba(230, 129, 97, 1);
            --color-orange-500: rgba(168, 75, 47, 1);
            --color-green-400: rgba(74, 222, 128, 1);
            --color-green-500: rgba(34, 197, 94, 1);
            --color-green-600: rgba(22, 163, 74, 1);
            --color-blue-400: rgba(96, 165, 250, 1);
            --color-blue-500: rgba(59, 130, 246, 1);
            --color-purple-400: rgba(196, 181, 253, 1);
            --color-purple-500: rgba(147, 51, 234, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: var(--color-charcoal-700);
            line-height: 1.6;
        }

        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .main-content {
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 800px;
            width: 100%;
            min-height: 600px;
            position: relative;
            overflow: hidden;
        }

        .grade-selection {
            text-align: center;
        }

        .grade-selection h2 {
            margin-bottom: 30px;
            color: var(--color-teal-700);
            font-size: 2rem;
        }

        .grade-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .grade-card {
            background: linear-gradient(135deg, var(--color-teal-400), var(--color-teal-600));
            color: white;
            border: none;
            border-radius: 15px;
            padding: 30px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            font-weight: bold;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

        .grade-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        }

        .progress-info {
            background: var(--color-gray-200);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
        }

        .progress-info h3 {
            color: var(--color-teal-700);
            margin-bottom: 10px;
        }

        .game-selection {
            text-align: center;
        }

        .game-selection h2 {
            margin-bottom: 20px;
            color: var(--color-teal-700);
            font-size: 1.8rem;
        }

        .back-button {
            background: var(--color-gray-400);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 10px 20px;
            cursor: pointer;
            margin-bottom: 20px;
            font-size: 1rem;
            transition: background 0.3s ease;
        }

        .back-button:hover {
            background: var(--color-gray-300);
        }

        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .game-card {
            background: white;
            border: 2px solid var(--color-gray-200);
            border-radius: 15px;
            padding: 30px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .game-card:hover {
            border-color: var(--color-teal-500);
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

        .game-card .icon {
            font-size: 3rem;
            margin-bottom: 15px;
            display: block;
        }

        .game-card h3 {
            color: var(--color-teal-700);
            margin-bottom: 10px;
            font-size: 1.3rem;
        }

        .game-card p {
            color: var(--color-gray-400);
            font-size: 0.9rem;
        }

        .quiz-game, .memory-game, .scramble-game, .builder-game {
            text-align: center;
        }

        .quiz-game h2, .memory-game h2, .scramble-game h2, .builder-game h2 {
            margin-bottom: 20px;
            color: var(--color-teal-700);
        }

        .question-container {
            background: var(--color-gray-200);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            text-align: left;
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            align-items: center;
        }

        .question-number {
            background: var(--color-teal-500);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .timer {
            background: var(--color-orange-500);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .question-text {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 20px;
            color: var(--color-charcoal-700);
        }

        .options-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .option-button {
            background: white;
            border: 2px solid var(--color-gray-300);
            border-radius: 10px;
            padding: 15px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            font-size: 1rem;
        }

        .option-button:hover {
            border-color: var(--color-teal-500);
            background: var(--color-teal-300);
            color: white;
        }

        .option-button.correct {
            background: var(--color-green-500);
            border-color: var(--color-green-600);
            color: white;
        }

        .option-button.incorrect {
            background: var(--color-red-500);
            border-color: var(--color-red-400);
            color: white;
        }

        .option-button.disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }

        .explanation {
            background: var(--color-blue-400);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            font-size: 0.95rem;
        }

        .next-button {
            background: var(--color-teal-500);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 30px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            margin-top: 20px;
            transition: background 0.3s ease;
        }

        .next-button:hover {
            background: var(--color-teal-600);
        }

        .score-display {
            background: var(--color-purple-400);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: bold;
            margin-bottom: 20px;
            display: inline-block;
        }

        .memory-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            max-width: 400px;
            margin: 20px auto;
        }

        .memory-card {
            aspect-ratio: 1;
            background: var(--color-gray-300);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: bold;
            text-align: center;
            padding: 5px;
            min-height: 80px;
        }

        .memory-card.flipped {
            background: var(--color-teal-400);
            color: white;
        }

        .memory-card.matched {
            background: var(--color-green-500);
            color: white;
        }

        .memory-card:hover:not(.flipped):not(.matched) {
            background: var(--color-gray-400);
        }

        .scramble-container {
            max-width: 500px;
            margin: 0 auto;
        }

        .scrambled-word {
            background: var(--color-gray-200);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-size: 1.5rem;
            font-weight: bold;
            letter-spacing: 3px;
            text-align: center;
        }

        .word-input {
            width: 100%;
            padding: 15px;
            border: 2px solid var(--color-gray-300);
            border-radius: 10px;
            font-size: 1.2rem;
            margin-bottom: 20px;
            text-align: center;
        }

        .word-input:focus {
            outline: none;
            border-color: var(--color-teal-500);
        }

        .check-button {
            background: var(--color-green-500);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 30px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            margin-right: 10px;
            transition: background 0.3s ease;
        }

        .check-button:hover {
            background: var(--color-green-600);
        }

        .hint-button {
            background: var(--color-orange-500);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 30px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: background 0.3s ease;
        }

        .hint-button:hover {
            background: var(--color-orange-400);
        }

        .result-message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            font-weight: bold;
        }

        .result-message.success {
            background: var(--color-green-400);
            color: white;
        }

        .result-message.error {
            background: var(--color-red-400);
            color: white;
        }

        .ecosystem-builder {
            max-width: 600px;
            margin: 0 auto;
        }

        .ecosystem-layers {
            background: linear-gradient(to bottom, #87CEEB 0%, #98FB98 50%, #8B4513 100%);
            height: 400px;
            border-radius: 15px;
            position: relative;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .ecosystem-layer {
            position: absolute;
            width: 100%;
            height: 33.33%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px dashed rgba(255,255,255,0.3);
            color: white;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        .sky-layer {
            top: 0;
        }

        .ground-layer {
            top: 33.33%;
        }

        .underground-layer {
            top: 66.66%;
        }

        .organism-bank {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }

        .organism-item {
            background: white;
            border: 2px solid var(--color-gray-300);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: grab;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: bold;
        }

        .organism-item:hover {
            border-color: var(--color-teal-500);
            transform: scale(1.05);
        }

        .organism-item:active {
            cursor: grabbing;
        }

        .results-screen {
            text-align: center;
        }

        .results-screen h2 {
            color: var(--color-teal-700);
            margin-bottom: 30px;
            font-size: 2rem;
        }

        .final-score {
            background: linear-gradient(135deg, var(--color-purple-400), var(--color-purple-500));
            color: white;
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .achievement {
            background: var(--color-orange-400);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            font-weight: bold;
        }

        .results-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .results-button {
            background: var(--color-teal-500);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .results-button:hover {
            background: var(--color-teal-600);
            transform: translateY(-2px);
        }

        .results-button.secondary {
            background: var(--color-gray-400);
        }

        .results-button.secondary:hover {
            background: var(--color-gray-300);
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }
            
            .header p {
                font-size: 1rem;
            }
            
            .main-content {
                padding: 20px;
                margin: 10px;
            }
            
            .grade-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
            }
            
            .grade-card {
                padding: 20px 15px;
                font-size: 1rem;
            }
            
            .game-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .memory-grid {
                grid-template-columns: repeat(3, 1fr);
                max-width: 300px;
            }
            
            .results-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .results-button {
                width: 200px;
            }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useCallback } = React;

        // Game data
        const gameData = {
            "grades": {
                "6": {
                    "title": "Grade 6 Environmental Science",
                    "topics": ["Natural Resources", "Food Chains & Webs", "Pollution Basics", "Water Cycle", "Waste Management", "Local Environment Issues"],
                    "quiz_questions": [
                        {
                            "question": "Which of the following is a renewable natural resource?",
                            "options": ["Coal", "Solar energy", "Oil", "Natural gas"],
                            "correct": 1,
                            "explanation": "Solar energy is renewable because it comes from the sun and will not run out during human lifetimes."
                        },
                        {
                            "question": "What are organisms that make their own food called?",
                            "options": ["Consumers", "Decomposers", "Producers", "Predators"],
                            "correct": 2,
                            "explanation": "Producers like plants make their own food through photosynthesis using sunlight, water, and carbon dioxide."
                        },
                        {
                            "question": "Which type of pollution affects the air we breathe?",
                            "options": ["Water pollution", "Air pollution", "Soil pollution", "Noise pollution"],
                            "correct": 1,
                            "explanation": "Air pollution includes harmful gases and particles in the atmosphere that we breathe."
                        },
                        {
                            "question": "In the water cycle, what happens when water vapor cools down?",
                            "options": ["Evaporation", "Condensation", "Precipitation", "Collection"],
                            "correct": 1,
                            "explanation": "Condensation occurs when water vapor cools and changes back into liquid water, forming clouds."
                        },
                        {
                            "question": "Which items are biodegradable?",
                            "options": ["Plastic bottles", "Fruit peels", "Glass bottles", "Metal cans"],
                            "correct": 1,
                            "explanation": "Fruit peels break down naturally in the environment, making them biodegradable."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Producer", "definition": "Makes own food"},
                        {"term": "Consumer", "definition": "Eats other organisms"},
                        {"term": "Decomposer", "definition": "Breaks down dead material"},
                        {"term": "Herbivore", "definition": "Eats only plants"},
                        {"term": "Carnivore", "definition": "Eats only meat"},
                        {"term": "Omnivore", "definition": "Eats plants and meat"}
                    ],
                    "word_scrambles": ["FOREST", "WATER", "POLLUTION", "RECYCLING"]
                },
                "7": {
                    "title": "Grade 7 Environmental Science",
                    "topics": ["Ecosystems & Biodiversity", "Soil Conservation", "Natural Disasters", "Renewable Resources", "Energy Conservation", "Human Impact"],
                    "quiz_questions": [
                        {
                            "question": "Which ecosystem has the highest biodiversity?",
                            "options": ["Desert", "Tropical rainforest", "Tundra", "Grassland"],
                            "correct": 1,
                            "explanation": "Tropical rainforests have the most diverse plant and animal species of any ecosystem on Earth."
                        },
                        {
                            "question": "What causes soil erosion?",
                            "options": ["Planting trees", "Wind and water", "Adding fertilizer", "Crop rotation"],
                            "correct": 1,
                            "explanation": "Wind and water can wash away or blow away topsoil, especially when vegetation is removed."
                        },
                        {
                            "question": "Which renewable energy source uses moving air?",
                            "options": ["Solar", "Hydroelectric", "Wind", "Geothermal"],
                            "correct": 2,
                            "explanation": "Wind energy captures the kinetic energy of moving air using wind turbines."
                        },
                        {
                            "question": "What is the main cause of habitat destruction?",
                            "options": ["Volcanic eruptions", "Human activities", "Climate change", "Natural disasters"],
                            "correct": 1,
                            "explanation": "Human activities like deforestation, urbanization, and agriculture are the main causes of habitat destruction."
                        },
                        {
                            "question": "Which practice helps conserve energy at home?",
                            "options": ["Leaving lights on", "Using LED bulbs", "Running air conditioning constantly", "Taking long showers"],
                            "correct": 1,
                            "explanation": "LED bulbs use much less energy than traditional incandescent bulbs and last longer."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Ecosystem", "definition": "Community of living & non-living things"},
                        {"term": "Biodiversity", "definition": "Variety of life in an area"},
                        {"term": "Erosion", "definition": "Wearing away of soil"},
                        {"term": "Renewable", "definition": "Can be replenished naturally"},
                        {"term": "Conservation", "definition": "Protecting natural resources"},
                        {"term": "Habitat", "definition": "Natural home of organisms"}
                    ],
                    "word_scrambles": ["ECOSYSTEM", "BIODIVERSITY", "RENEWABLE", "EROSION"]
                },
                "8": {
                    "title": "Grade 8 Environmental Science",
                    "topics": ["Air Pollution & Global Warming", "Water Pollution", "Deforestation", "Fossil Fuels vs Alternative Energy", "Biodiversity Conservation", "Sustainable Agriculture"],
                    "quiz_questions": [
                        {
                            "question": "What is the main greenhouse gas contributing to global warming?",
                            "options": ["Oxygen", "Carbon dioxide", "Nitrogen", "Argon"],
                            "correct": 1,
                            "explanation": "Carbon dioxide from burning fossil fuels is the primary greenhouse gas causing global warming."
                        },
                        {
                            "question": "Which activity causes water pollution?",
                            "options": ["Planting trees", "Dumping chemicals in rivers", "Building dams", "Fishing"],
                            "correct": 1,
                            "explanation": "Dumping chemicals and waste into water bodies contaminates them and harms aquatic life."
                        },
                        {
                            "question": "What is a major consequence of deforestation?",
                            "options": ["Increased oxygen", "Loss of wildlife habitat", "Better soil quality", "Reduced flooding"],
                            "correct": 1,
                            "explanation": "Deforestation destroys the homes of many animals and plants, leading to biodiversity loss."
                        },
                        {
                            "question": "Which is an example of sustainable agriculture?",
                            "options": ["Heavy pesticide use", "Monoculture farming", "Crop rotation", "Soil depletion"],
                            "correct": 2,
                            "explanation": "Crop rotation helps maintain soil health and reduces pest problems naturally."
                        },
                        {
                            "question": "What makes an energy source 'alternative'?",
                            "options": ["It's expensive", "It's not fossil fuel based", "It's imported", "It's unlimited"],
                            "correct": 1,
                            "explanation": "Alternative energy sources are renewable options that don't rely on fossil fuels."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Greenhouse Gas", "definition": "Traps heat in atmosphere"},
                        {"term": "Acid Rain", "definition": "Rain with harmful chemicals"},
                        {"term": "Smog", "definition": "Air pollution in cities"},
                        {"term": "Pesticide", "definition": "Chemical to kill pests"},
                        {"term": "Organic Farming", "definition": "Growing without chemicals"},
                        {"term": "Fossil Fuel", "definition": "Coal, oil, natural gas"}
                    ],
                    "word_scrambles": ["GLOBAL WARMING", "POLLUTION", "SUSTAINABLE", "FOSSIL FUELS"]
                },
                "9": {
                    "title": "Grade 9 Environmental Science",
                    "topics": ["Ecosystem Dynamics", "Population Growth Impact", "Ozone Depletion", "Waste Management Tech", "Renewable Energy Tech", "Environmental Ethics"],
                    "quiz_questions": [
                        {
                            "question": "What is an ecological pyramid?",
                            "options": ["A food chain", "A representation of energy flow", "A type of ecosystem", "A conservation method"],
                            "correct": 1,
                            "explanation": "Ecological pyramids show the flow of energy or matter through different trophic levels in an ecosystem."
                        },
                        {
                            "question": "What depletes the ozone layer?",
                            "options": ["Carbon dioxide", "CFCs", "Oxygen", "Water vapor"],
                            "correct": 1,
                            "explanation": "Chlorofluorocarbons (CFCs) break down ozone molecules in the stratosphere."
                        },
                        {
                            "question": "Which renewable energy technology converts sunlight directly to electricity?",
                            "options": ["Wind turbines", "Solar panels", "Hydroelectric dams", "Geothermal plants"],
                            "correct": 1,
                            "explanation": "Solar panels use photovoltaic cells to convert sunlight directly into electrical energy."
                        },
                        {
                            "question": "What is composting?",
                            "options": ["Burning waste", "Burying waste", "Breaking down organic waste", "Recycling plastic"],
                            "correct": 2,
                            "explanation": "Composting is the natural decomposition of organic materials into nutrient-rich soil."
                        },
                        {
                            "question": "What does environmental ethics study?",
                            "options": ["Animal behavior", "Plant growth", "Human responsibility to nature", "Weather patterns"],
                            "correct": 2,
                            "explanation": "Environmental ethics examines our moral obligations and responsibilities toward the environment."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Trophic Level", "definition": "Position in food chain"},
                        {"term": "Nitrogen Cycle", "definition": "Movement of nitrogen in nature"},
                        {"term": "CFCs", "definition": "Ozone-depleting chemicals"},
                        {"term": "Composting", "definition": "Organic waste breakdown"},
                        {"term": "Biogas", "definition": "Gas from organic matter"},
                        {"term": "Sustainability", "definition": "Meeting needs without harming future"}
                    ],
                    "word_scrambles": ["ECOLOGICAL PYRAMID", "OZONE DEPLETION", "SUSTAINABILITY", "COMPOSTING"]
                },
                "10": {
                    "title": "Grade 10 Environmental Science",
                    "topics": ["Global Environmental Issues", "Resource Management", "Conservation Areas", "Environmental Laws", "Health & Environment", "Carbon Footprint"],
                    "quiz_questions": [
                        {
                            "question": "What causes acid rain?",
                            "options": ["Carbon dioxide", "Sulfur dioxide and nitrogen oxides", "Oxygen", "Water vapor"],
                            "correct": 1,
                            "explanation": "Acid rain forms when sulfur dioxide and nitrogen oxides react with water in the atmosphere."
                        },
                        {
                            "question": "What is rainwater harvesting?",
                            "options": ["Collecting and storing rainwater", "Preventing rain", "Creating artificial rain", "Measuring rainfall"],
                            "correct": 0,
                            "explanation": "Rainwater harvesting collects and stores rainwater for later use, conserving water resources."
                        },
                        {
                            "question": "What is a biosphere reserve?",
                            "options": ["A zoo", "A protected ecosystem area", "A research lab", "A waste dump"],
                            "correct": 1,
                            "explanation": "Biosphere reserves are protected areas that conserve biodiversity while allowing sustainable use."
                        },
                        {
                            "question": "Which disease is linked to air pollution?",
                            "options": ["Diabetes", "Asthma", "Broken bones", "Food poisoning"],
                            "correct": 1,
                            "explanation": "Air pollution can trigger asthma attacks and cause respiratory problems."
                        },
                        {
                            "question": "What is a carbon footprint?",
                            "options": ["A shoe print", "Amount of CO2 produced by activities", "A type of fossil", "A measurement tool"],
                            "correct": 1,
                            "explanation": "A carbon footprint measures the total greenhouse gas emissions caused by human activities."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Acid Rain", "definition": "Rain with harmful acids"},
                        {"term": "Desertification", "definition": "Land becoming desert"},
                        {"term": "National Park", "definition": "Protected natural area"},
                        {"term": "Sanctuary", "definition": "Safe place for wildlife"},
                        {"term": "Carbon Footprint", "definition": "Your CO2 emissions"},
                        {"term": "Sanitation", "definition": "Clean water and waste systems"}
                    ],
                    "word_scrambles": ["ACID RAIN", "DESERTIFICATION", "CARBON FOOTPRINT", "SANITATION"]
                },
                "11": {
                    "title": "Grade 11 Environmental Science",
                    "topics": ["Ecology & Succession", "Environmental Chemistry", "Hydrosphere", "Environmental Physics", "Sustainable Technologies", "Nanotechnology"],
                    "quiz_questions": [
                        {
                            "question": "What is ecological succession?",
                            "options": ["Migration of animals", "Gradual change in ecosystem", "Extinction of species", "Climate change"],
                            "correct": 1,
                            "explanation": "Ecological succession is the gradual process of change in species composition of an ecosystem over time."
                        },
                        {
                            "question": "What causes groundwater depletion?",
                            "options": ["Too much rain", "Excessive pumping", "Ocean waves", "Earthquakes"],
                            "correct": 1,
                            "explanation": "Groundwater depletion occurs when water is pumped out faster than it can be naturally replenished."
                        },
                        {
                            "question": "What are heavy metals in environmental chemistry?",
                            "options": ["Music instruments", "Toxic metallic elements", "Strong materials", "Expensive metals"],
                            "correct": 1,
                            "explanation": "Heavy metals like lead and mercury are toxic elements that can contaminate the environment."
                        },
                        {
                            "question": "What makes a building 'green'?",
                            "options": ["Green paint", "Energy efficient design", "Location in forest", "Large size"],
                            "correct": 1,
                            "explanation": "Green buildings are designed to be energy efficient and environmentally sustainable."
                        },
                        {
                            "question": "How can nanotechnology help water purification?",
                            "options": ["Making water bigger", "Creating tiny filters", "Adding chemicals", "Heating water"],
                            "correct": 1,
                            "explanation": "Nanotechnology can create extremely small filters that remove contaminants from water."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "Primary Succession", "definition": "Growth on bare rock"},
                        {"term": "Smog", "definition": "Smoke and fog mixture"},
                        {"term": "Aquifer", "definition": "Underground water source"},
                        {"term": "Photochemical", "definition": "Chemical reaction using light"},
                        {"term": "Green Building", "definition": "Environmentally friendly structure"},
                        {"term": "Nanotechnology", "definition": "Technology using tiny particles"}
                    ],
                    "word_scrambles": ["SUCCESSION", "AQUIFER", "HEAVY METALS", "NANOTECHNOLOGY"]
                },
                "12": {
                    "title": "Grade 12 Environmental Science",
                    "topics": ["Environmental Impact Assessment", "Green Chemistry", "Global Initiatives", "Renewable Energy Engineering", "Climate Modeling", "STEM Careers"],
                    "quiz_questions": [
                        {
                            "question": "What is an Environmental Impact Assessment (EIA)?",
                            "options": ["A weather report", "Study of project's environmental effects", "A pollution measurement", "A conservation plan"],
                            "correct": 1,
                            "explanation": "EIA evaluates the potential environmental consequences of proposed projects before implementation."
                        },
                        {
                            "question": "What is the Paris Agreement about?",
                            "options": ["Trade", "Climate change action", "Space exploration", "Ocean protection"],
                            "correct": 1,
                            "explanation": "The Paris Agreement is a global treaty to limit global warming and reduce greenhouse gas emissions."
                        },
                        {
                            "question": "What makes chemistry 'green'?",
                            "options": ["Using green chemicals", "Reducing harmful waste", "Working outdoors", "Using plants"],
                            "correct": 1,
                            "explanation": "Green chemistry designs chemical processes to reduce or eliminate hazardous substances."
                        },
                        {
                            "question": "What do climate models predict?",
                            "options": ["Daily weather", "Future climate patterns", "Earthquake timing", "Stock prices"],
                            "correct": 1,
                            "explanation": "Climate models use data to predict long-term climate patterns and changes."
                        },
                        {
                            "question": "What does GIS stand for in environmental careers?",
                            "options": ["Green Information Systems", "Geographic Information Systems", "Global Internet Services", "Government Intelligence Services"],
                            "correct": 1,
                            "explanation": "GIS uses computer systems to capture, store, and analyze geographic and spatial data."
                        }
                    ],
                    "memory_pairs": [
                        {"term": "EIA", "definition": "Environmental Impact Assessment"},
                        {"term": "Kyoto Protocol", "definition": "Climate change treaty"},
                        {"term": "SDGs", "definition": "Sustainable Development Goals"},
                        {"term": "Bioenergy", "definition": "Energy from living materials"},
                        {"term": "Remote Sensing", "definition": "Studying Earth from distance"},
                        {"term": "Climate Science", "definition": "Study of climate systems"}
                    ],
                    "word_scrambles": ["IMPACT ASSESSMENT", "GREEN CHEMISTRY", "KYOTO PROTOCOL", "ENERGY ENGINEERING"]
                }
            },
            "achievement_levels": [
                {"name": "Eco Explorer", "points": 0, "color": "#8B4513"},
                {"name": "Nature Novice", "points": 100, "color": "#CD853F"},
                {"name": "Green Guardian", "points": 300, "color": "#9ACD32"},
                {"name": "Earth Expert", "points": 600, "color": "#32CD32"},
                {"name": "Climate Champion", "points": 1000, "color": "#FFD700"},
                {"name": "Environmental Elite", "points": 1500, "color": "#FF6B35"}
            ],
            "game_types": [
                {"id": "quiz", "name": "Quiz Challenge", "description": "Test your knowledge with multiple choice questions", "icon": "🧠"},
                {"id": "memory", "name": "Memory Match", "description": "Match environmental terms with their meanings", "icon": "🃏"},
                {"id": "scramble", "name": "Word Scramble", "description": "Unscramble environmental science terms", "icon": "🔤"},
                {"id": "builder", "name": "Ecosystem Builder", "description": "Build and understand ecosystem relationships", "icon": "🌳"}
            ]
        };

        // Utility functions
        const shuffleArray = (array) => {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        };

        const scrambleWord = (word) => {
            return word.split('').sort(() => Math.random() - 0.5).join('');
        };

        // Main App Component
        function App() {
            const [currentScreen, setCurrentScreen] = useState('home');
            const [selectedGrade, setSelectedGrade] = useState(null);
            const [selectedGame, setSelectedGame] = useState(null);
            const [totalPoints, setTotalPoints] = useState(() => {
                const saved = localStorage.getItem('totalPoints');
                return saved ? parseInt(saved) : 0;
            });
            const [gradeProgress, setGradeProgress] = useState(() => {
                const saved = localStorage.getItem('gradeProgress');
                return saved ? JSON.parse(saved) : {};
            });

            useEffect(() => {
                localStorage.setItem('totalPoints', totalPoints.toString());
            }, [totalPoints]);

            useEffect(() => {
                localStorage.setItem('gradeProgress', JSON.stringify(gradeProgress));
            }, [gradeProgress]);

            const getCurrentAchievement = () => {
                for (let i = gameData.achievement_levels.length - 1; i >= 0; i--) {
                    if (totalPoints >= gameData.achievement_levels[i].points) {
                        return gameData.achievement_levels[i];
                    }
                }
                return gameData.achievement_levels[0];
            };

            const addPoints = (points) => {
                setTotalPoints(prev => prev + points);
            };

            const updateGradeProgress = (grade, gameType, score) => {
                setGradeProgress(prev => ({
                    ...prev,
                    [grade]: {
                        ...prev[grade],
                        [gameType]: Math.max(prev[grade]?.[gameType] || 0, score)
                    }
                }));
            };

            const renderScreen = () => {
                switch (currentScreen) {
                    case 'home':
                        return <HomeScreen 
                            onSelectGrade={setSelectedGrade}
                            setCurrentScreen={setCurrentScreen}
                            totalPoints={totalPoints}
                            currentAchievement={getCurrentAchievement()}
                            gradeProgress={gradeProgress}
                        />;
                    case 'gameSelection':
                        return <GameSelectionScreen 
                            grade={selectedGrade}
                            onSelectGame={setSelectedGame}
                            onBack={() => setCurrentScreen('home')}
                            setCurrentScreen={setCurrentScreen}
                        />;
                    case 'quiz':
                        return <QuizGame 
                            grade={selectedGrade}
                            onGameComplete={(score) => {
                                addPoints(score);
                                updateGradeProgress(selectedGrade, 'quiz', score);
                                setCurrentScreen('results');
                            }}
                            onBack={() => setCurrentScreen('gameSelection')}
                        />;
                    case 'memory':
                        return <MemoryGame 
                            grade={selectedGrade}
                            onGameComplete={(score) => {
                                addPoints(score);
                                updateGradeProgress(selectedGrade, 'memory', score);
                                setCurrentScreen('results');
                            }}
                            onBack={() => setCurrentScreen('gameSelection')}
                        />;
                    case 'scramble':
                        return <WordScrambleGame 
                            grade={selectedGrade}
                            onGameComplete={(score) => {
                                addPoints(score);
                                updateGradeProgress(selectedGrade, 'scramble', score);
                                setCurrentScreen('results');
                            }}
                            onBack={() => setCurrentScreen('gameSelection')}
                        />;
                    case 'builder':
                        return <EcosystemBuilderGame 
                            grade={selectedGrade}
                            onGameComplete={(score) => {
                                addPoints(score);
                                updateGradeProgress(selectedGrade, 'builder', score);
                                setCurrentScreen('results');
                            }}
                            onBack={() => setCurrentScreen('gameSelection')}
                        />;
                    case 'results':
                        return <ResultsScreen 
                            grade={selectedGrade}
                            totalPoints={totalPoints}
                            currentAchievement={getCurrentAchievement()}
                            onPlayAgain={() => setCurrentScreen(selectedGame)}
                            onNewGame={() => setCurrentScreen('gameSelection')}
                            onHome={() => setCurrentScreen('home')}
                        />;
                    default:
                        return <HomeScreen 
                            onSelectGrade={setSelectedGrade}
                            setCurrentScreen={setCurrentScreen}
                            totalPoints={totalPoints}
                            currentAchievement={getCurrentAchievement()}
                            gradeProgress={gradeProgress}
                        />;
                }
            };

            return (
                <div className="app-container">
                    <div className="header">
                        <h1>🌍 EcoLearn</h1>
                        <p>Interactive Environmental Science Games</p>
                    </div>
                    <div className="main-content fade-in">
                        {renderScreen()}
                    </div>
                </div>
            );
        }

        // Home Screen Component
        function HomeScreen({ onSelectGrade, setCurrentScreen, totalPoints, currentAchievement, gradeProgress }) {
            const handleGradeSelect = (grade) => {
                onSelectGrade(grade);
                setCurrentScreen('gameSelection');
            };

            return (
                <div className="grade-selection">
                    <h2>Choose Your Grade Level</h2>
                    <div className="progress-info">
                        <h3>Your Progress</h3>
                        <div className="score-display">
                            Total Points: {totalPoints}
                        </div>
                        <div style={{
                            background: currentAchievement.color,
                            color: 'white',
                            padding: '10px 20px',
                            borderRadius: '20px',
                            fontWeight: 'bold',
                            display: 'inline-block'
                        }}>
                            {currentAchievement.name}
                        </div>
                    </div>
                    <div className="grade-grid">
                        {Object.keys(gameData.grades).map(grade => (
                            <button
                                key={grade}
                                className="grade-card pulse"
                                onClick={() => handleGradeSelect(grade)}
                            >
                                <div>Grade {grade}</div>
                                <div style={{ fontSize: '0.9rem', marginTop: '10px', opacity: 0.8 }}>
                                    {gameData.grades[grade].title}
                                </div>
                                {gradeProgress[grade] && (
                                    <div style={{ fontSize: '0.8rem', marginTop: '5px' }}>
                                        Games played: {Object.keys(gradeProgress[grade]).length}
                                    </div>
                                )}
                            </button>
                        ))}
                    </div>
                </div>
            );
        }

        // Game Selection Screen Component
        function GameSelectionScreen({ grade, onSelectGame, onBack, setCurrentScreen }) {
            const gradeData = gameData.grades[grade];

            const handleGameSelect = (gameType) => {
                onSelectGame(gameType);
                setCurrentScreen(gameType);
            };

            return (
                <div className="game-selection">
                    <button className="back-button" onClick={onBack}>
                        ← Back to Grades
                    </button>
                    <h2>{gradeData.title}</h2>
                    <div style={{ 
                        background: 'var(--color-gray-200)', 
                        padding: '15px', 
                        borderRadius: '10px', 
                        marginBottom: '20px',
                        textAlign: 'left'
                    }}>
                        <h4>Topics covered:</h4>
                        <ul style={{ marginLeft: '20px', marginTop: '10px' }}>
                            {gradeData.topics.map((topic, index) => (
                                <li key={index}>{topic}</li>
                            ))}
                        </ul>
                    </div>
                    <div className="game-grid">
                        {gameData.game_types.map(game => (
                            <div
                                key={game.id}
                                className="game-card"
                                onClick={() => handleGameSelect(game.id)}
                            >
                                <span className="icon">{game.icon}</span>
                                <h3>{game.name}</h3>
                                <p>{game.description}</p>
                            </div>
                        ))}
                    </div>
                </div>
            );
        }

        // Quiz Game Component
        function QuizGame({ grade, onGameComplete, onBack }) {
            const [currentQuestion, setCurrentQuestion] = useState(0);
            const [selectedAnswer, setSelectedAnswer] = useState(null);
            const [showExplanation, setShowExplanation] = useState(false);
            const [score, setScore] = useState(0);
            const [timeLeft, setTimeLeft] = useState(30);
            const [questions] = useState(() => shuffleArray(gameData.grades[grade].quiz_questions));

            useEffect(() => {
                if (timeLeft > 0 && !showExplanation) {
                    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
                    return () => clearTimeout(timer);
                } else if (timeLeft === 0 && !showExplanation) {
                    setShowExplanation(true);
                }
            }, [timeLeft, showExplanation]);

            const handleAnswerSelect = (answerIndex) => {
                if (selectedAnswer !== null) return;
                
                setSelectedAnswer(answerIndex);
                setShowExplanation(true);
                
                if (answerIndex === questions[currentQuestion].correct) {
                    setScore(score + 10);
                } else {
                    setScore(Math.max(0, score - 5));
                }
            };

            const handleNextQuestion = () => {
                if (currentQuestion < questions.length - 1) {
                    setCurrentQuestion(currentQuestion + 1);
                    setSelectedAnswer(null);
                    setShowExplanation(false);
                    setTimeLeft(30);
                } else {
                    onGameComplete(score);
                }
            };

            const question = questions[currentQuestion];

            return (
                <div className="quiz-game">
                    <button className="back-button" onClick={onBack}>
                        ← Back to Games
                    </button>
                    <h2>Quiz Challenge - Grade {grade}</h2>
                    <div className="score-display">Score: {score} points</div>
                    
                    <div className="question-container">
                        <div className="question-header">
                            <div className="question-number">
                                Question {currentQuestion + 1} of {questions.length}
                            </div>
                            <div className="timer">⏰ {timeLeft}s</div>
                        </div>
                        
                        <div className="question-text">{question.question}</div>
                        
                        <div className="options-grid">
                            {question.options.map((option, index) => (
                                <button
                                    key={index}
                                    className={`option-button ${
                                        selectedAnswer !== null ? 'disabled' : ''
                                    } ${
                                        selectedAnswer === index 
                                            ? index === question.correct ? 'correct' : 'incorrect'
                                            : selectedAnswer !== null && index === question.correct 
                                            ? 'correct' : ''
                                    }`}
                                    onClick={() => handleAnswerSelect(index)}
                                    disabled={selectedAnswer !== null}
                                >
                                    {option}
                                </button>
                            ))}
                        </div>
                        
                        {showExplanation && (
                            <div className="explanation">
                                <strong>Explanation:</strong> {question.explanation}
                            </div>
                        )}
                    </div>
                    
                    {showExplanation && (
                        <button className="next-button" onClick={handleNextQuestion}>
                            {currentQuestion < questions.length - 1 ? 'Next Question' : 'Finish Quiz'}
                        </button>
                    )}
                </div>
            );
        }

        // Memory Game Component
        function MemoryGame({ grade, onGameComplete, onBack }) {
            const [cards, setCards] = useState([]);
            const [flippedCards, setFlippedCards] = useState([]);
            const [matchedCards, setMatchedCards] = useState([]);
            const [score, setScore] = useState(0);
            const [moves, setMoves] = useState(0);

            useEffect(() => {
                const pairs = gameData.grades[grade].memory_pairs;
                const gameCards = [];
                
                pairs.forEach((pair, index) => {
                    gameCards.push({ id: index * 2, content: pair.term, type: 'term', pairId: index });
                    gameCards.push({ id: index * 2 + 1, content: pair.definition, type: 'definition', pairId: index });
                });
                
                setCards(shuffleArray(gameCards));
            }, [grade]);

            useEffect(() => {
                if (flippedCards.length === 2) {
                    setMoves(moves + 1);
                    
                    if (flippedCards[0].pairId === flippedCards[1].pairId) {
                        setMatchedCards([...matchedCards, ...flippedCards.map(card => card.id)]);
                        setScore(score + 20);
                        setFlippedCards([]);
                    } else {
                        setTimeout(() => setFlippedCards([]), 1000);
                    }
                }
            }, [flippedCards]);

            useEffect(() => {
                if (matchedCards.length === cards.length && cards.length > 0) {
                    const bonus = Math.max(0, 100 - moves * 5);
                    onGameComplete(score + bonus);
                }
            }, [matchedCards, cards]);

            const handleCardClick = (card) => {
                if (flippedCards.length === 2 || flippedCards.find(c => c.id === card.id) || matchedCards.includes(card.id)) {
                    return;
                }
                
                setFlippedCards([...flippedCards, card]);
            };

            return (
                <div className="memory-game">
                    <button className="back-button" onClick={onBack}>
                        ← Back to Games
                    </button>
                    <h2>Memory Match - Grade {grade}</h2>
                    <div className="score-display">Score: {score} points | Moves: {moves}</div>
                    
                    <div className="memory-grid">
                        {cards.map(card => (
                            <div
                                key={card.id}
                                className={`memory-card ${
                                    flippedCards.find(c => c.id === card.id) || matchedCards.includes(card.id)
                                        ? matchedCards.includes(card.id) ? 'matched' : 'flipped'
                                        : ''
                                }`}
                                onClick={() => handleCardClick(card)}
                            >
                                {flippedCards.find(c => c.id === card.id) || matchedCards.includes(card.id)
                                    ? card.content
                                    : '?'
                                }
                            </div>
                        ))}
                    </div>
                </div>
            );
        }

        // Word Scramble Game Component
        function WordScrambleGame({ grade, onGameComplete, onBack }) {
            const [words] = useState(gameData.grades[grade].word_scrambles);
            const [currentWordIndex, setCurrentWordIndex] = useState(0);
            const [scrambledWord, setScrambledWord] = useState('');
            const [userInput, setUserInput] = useState('');
            const [score, setScore] = useState(0);
            const [message, setMessage] = useState('');
            const [showHint, setShowHint] = useState(false);

            useEffect(() => {
                if (currentWordIndex < words.length) {
                    setScrambledWord(scrambleWord(words[currentWordIndex]));
                    setUserInput('');
                    setMessage('');
                    setShowHint(false);
                }
            }, [currentWordIndex, words]);

            const handleCheck = () => {
                if (userInput.toUpperCase().replace(/\s/g, '') === words[currentWordIndex].replace(/\s/g, '')) {
                    setScore(score + (showHint ? 5 : 10));
                    setMessage('Correct! Well done!');
                    
                    setTimeout(() => {
                        if (currentWordIndex < words.length - 1) {
                            setCurrentWordIndex(currentWordIndex + 1);
                        } else {
                            onGameComplete(score + (showHint ? 5 : 10));
                        }
                    }, 1500);
                } else {
                    setMessage('Try again!');
                    setScore(Math.max(0, score - 2));
                }
            };

            const handleHint = () => {
                setShowHint(true);
                setScore(Math.max(0, score - 5));
            };

            if (currentWordIndex >= words.length) {
                return null;
            }

            return (
                <div className="scramble-game">
                    <button className="back-button" onClick={onBack}>
                        ← Back to Games
                    </button>
                    <h2>Word Scramble - Grade {grade}</h2>
                    <div className="score-display">Score: {score} points</div>
                    
                    <div className="scramble-container">
                        <div>Word {currentWordIndex + 1} of {words.length}</div>
                        
                        <div className="scrambled-word">{scrambledWord}</div>
                        
                        <input
                            type="text"
                            className="word-input"
                            value={userInput}
                            onChange={(e) => setUserInput(e.target.value)}
                            placeholder="Type your answer here..."
                            onKeyPress={(e) => e.key === 'Enter' && handleCheck()}
                        />
                        
                        <div>
                            <button className="check-button" onClick={handleCheck}>
                                Check Answer
                            </button>
                            <button className="hint-button" onClick={handleHint}>
                                Hint (-5 points)
                            </button>
                        </div>
                        
                        {showHint && (
                            <div style={{
                                background: 'var(--color-orange-400)',
                                color: 'white',
                                padding: '10px',
                                borderRadius: '10px',
                                marginTop: '10px'
                            }}>
                                Hint: The word starts with "{words[currentWordIndex][0]}"
                            </div>
                        )}
                        
                        {message && (
                            <div className={`result-message ${message.includes('Correct') ? 'success' : 'error'}`}>
                                {message}
                            </div>
                        )}
                    </div>
                </div>
            );
        }

        // Ecosystem Builder Game Component
        function EcosystemBuilderGame({ grade, onGameComplete, onBack }) {
            const [score, setScore] = useState(0);
            const [placedOrganisms, setPlacedOrganisms] = useState([]);
            const [availableOrganisms] = useState([
                { name: 'Eagle', layer: 'sky', icon: '🦅' },
                { name: 'Tree', layer: 'ground', icon: '🌳' },
                { name: 'Rabbit', layer: 'ground', icon: '🐰' },
                { name: 'Worm', layer: 'underground', icon: '🪱' },
                { name: 'Bird', layer: 'sky', icon: '🐦' },
                { name: 'Grass', layer: 'ground', icon: '🌱' }
            ]);

            const handleDrop = (organism, layer) => {
                if (organism.layer === layer) {
                    setScore(score + 20);
                    setPlacedOrganisms([...placedOrganisms, { ...organism, placedLayer: layer }]);
                } else {
                    setScore(Math.max(0, score - 10));
                }
            };

            const handleFinish = () => {
                const bonus = placedOrganisms.length * 10;
                onGameComplete(score + bonus);
            };

            return (
                <div className="builder-game">
                    <button className="back-button" onClick={onBack}>
                        ← Back to Games
                    </button>
                    <h2>Ecosystem Builder - Grade {grade}</h2>
                    <div className="score-display">Score: {score} points</div>
                    
                    <div className="ecosystem-builder">
                        <p>Drag organisms to their correct ecosystem layers!</p>
                        
                        <div className="ecosystem-layers">
                            <div 
                                className="ecosystem-layer sky-layer"
                                onDrop={(e) => {
                                    e.preventDefault();
                                    const organism = JSON.parse(e.dataTransfer.getData('organism'));
                                    handleDrop(organism, 'sky');
                                }}
                                onDragOver={(e) => e.preventDefault()}
                            >
                                Sky Layer
                                {placedOrganisms.filter(org => org.placedLayer === 'sky').map((org, index) => (
                                    <span key={index} style={{ fontSize: '2rem', margin: '5px' }}>
                                        {org.icon}
                                    </span>
                                ))}
                            </div>
                            <div 
                                className="ecosystem-layer ground-layer"
                                onDrop={(e) => {
                                    e.preventDefault();
                                    const organism = JSON.parse(e.dataTransfer.getData('organism'));
                                    handleDrop(organism, 'ground');
                                }}
                                onDragOver={(e) => e.preventDefault()}
                            >
                                Ground Layer
                                {placedOrganisms.filter(org => org.placedLayer === 'ground').map((org, index) => (
                                    <span key={index} style={{ fontSize: '2rem', margin: '5px' }}>
                                        {org.icon}
                                    </span>
                                ))}
                            </div>
                            <div 
                                className="ecosystem-layer underground-layer"
                                onDrop={(e) => {
                                    e.preventDefault();
                                    const organism = JSON.parse(e.dataTransfer.getData('organism'));
                                    handleDrop(organism, 'underground');
                                }}
                                onDragOver={(e) => e.preventDefault()}
                            >
                                Underground Layer
                                {placedOrganisms.filter(org => org.placedLayer === 'underground').map((org, index) => (
                                    <span key={index} style={{ fontSize: '2rem', margin: '5px' }}>
                                        {org.icon}
                                    </span>
                                ))}
                            </div>
                        </div>
                        
                        <div className="organism-bank">
                            {availableOrganisms.filter(org => 
                                !placedOrganisms.find(placed => placed.name === org.name)
                            ).map((organism, index) => (
                                <div
                                    key={index}
                                    className="organism-item"
                                    draggable
                                    onDragStart={(e) => {
                                        e.dataTransfer.setData('organism', JSON.stringify(organism));
                                    }}
                                >
                                    <div style={{ fontSize: '2rem', marginBottom: '5px' }}>
                                        {organism.icon}
                                    </div>
                                    {organism.name}
                                </div>
                            ))}
                        </div>
                        
                        <button className="check-button" onClick={handleFinish}>
                            Finish Ecosystem
                        </button>
                    </div>
                </div>
            );
        }

        // Results Screen Component
        function ResultsScreen({ grade, totalPoints, currentAchievement, onPlayAgain, onNewGame, onHome }) {
            return (
                <div className="results-screen">
                    <h2>🎉 Game Complete!</h2>
                    
                    <div className="final-score">
                        Great job on completing Grade {grade}!
                        <br />
                        Total Points: {totalPoints}
                    </div>
                    
                    <div className="achievement" style={{ background: currentAchievement.color }}>
                        Current Level: {currentAchievement.name}
                    </div>
                    
                    <div className="results-buttons">
                        <button className="results-button" onClick={onPlayAgain}>
                            Play Again
                        </button>
                        <button className="results-button" onClick={onNewGame}>
                            Try Different Game
                        </button>
                        <button className="results-button secondary" onClick={onHome}>
                            Back to Home
                        </button>
                    </div>
                </div>
            );
        }

        // Render the App
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>